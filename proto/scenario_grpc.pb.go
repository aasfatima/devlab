// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/scenario.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScenarioService_StartScenario_FullMethodName         = "/scenario.ScenarioService/StartScenario"
	ScenarioService_StopScenario_FullMethodName          = "/scenario.ScenarioService/StopScenario"
	ScenarioService_GetScenarioStatus_FullMethodName     = "/scenario.ScenarioService/GetScenarioStatus"
	ScenarioService_GetTerminalURL_FullMethodName        = "/scenario.ScenarioService/GetTerminalURL"
	ScenarioService_GetDirectoryStructure_FullMethodName = "/scenario.ScenarioService/GetDirectoryStructure"
)

// ScenarioServiceClient is the client API for ScenarioService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScenarioServiceClient interface {
	StartScenario(ctx context.Context, in *StartScenarioRequest, opts ...grpc.CallOption) (*StartScenarioResponse, error)
	StopScenario(ctx context.Context, in *StopScenarioRequest, opts ...grpc.CallOption) (*StopScenarioResponse, error)
	GetScenarioStatus(ctx context.Context, in *GetScenarioStatusRequest, opts ...grpc.CallOption) (*GetScenarioStatusResponse, error)
	GetTerminalURL(ctx context.Context, in *GetTerminalURLRequest, opts ...grpc.CallOption) (*GetTerminalURLResponse, error)
	GetDirectoryStructure(ctx context.Context, in *GetDirectoryStructureRequest, opts ...grpc.CallOption) (*GetDirectoryStructureResponse, error)
}

type scenarioServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScenarioServiceClient(cc grpc.ClientConnInterface) ScenarioServiceClient {
	return &scenarioServiceClient{cc}
}

func (c *scenarioServiceClient) StartScenario(ctx context.Context, in *StartScenarioRequest, opts ...grpc.CallOption) (*StartScenarioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartScenarioResponse)
	err := c.cc.Invoke(ctx, ScenarioService_StartScenario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioServiceClient) StopScenario(ctx context.Context, in *StopScenarioRequest, opts ...grpc.CallOption) (*StopScenarioResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopScenarioResponse)
	err := c.cc.Invoke(ctx, ScenarioService_StopScenario_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioServiceClient) GetScenarioStatus(ctx context.Context, in *GetScenarioStatusRequest, opts ...grpc.CallOption) (*GetScenarioStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetScenarioStatusResponse)
	err := c.cc.Invoke(ctx, ScenarioService_GetScenarioStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioServiceClient) GetTerminalURL(ctx context.Context, in *GetTerminalURLRequest, opts ...grpc.CallOption) (*GetTerminalURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTerminalURLResponse)
	err := c.cc.Invoke(ctx, ScenarioService_GetTerminalURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scenarioServiceClient) GetDirectoryStructure(ctx context.Context, in *GetDirectoryStructureRequest, opts ...grpc.CallOption) (*GetDirectoryStructureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDirectoryStructureResponse)
	err := c.cc.Invoke(ctx, ScenarioService_GetDirectoryStructure_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScenarioServiceServer is the server API for ScenarioService service.
// All implementations must embed UnimplementedScenarioServiceServer
// for forward compatibility.
type ScenarioServiceServer interface {
	StartScenario(context.Context, *StartScenarioRequest) (*StartScenarioResponse, error)
	StopScenario(context.Context, *StopScenarioRequest) (*StopScenarioResponse, error)
	GetScenarioStatus(context.Context, *GetScenarioStatusRequest) (*GetScenarioStatusResponse, error)
	GetTerminalURL(context.Context, *GetTerminalURLRequest) (*GetTerminalURLResponse, error)
	GetDirectoryStructure(context.Context, *GetDirectoryStructureRequest) (*GetDirectoryStructureResponse, error)
	mustEmbedUnimplementedScenarioServiceServer()
}

// UnimplementedScenarioServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScenarioServiceServer struct{}

func (UnimplementedScenarioServiceServer) StartScenario(context.Context, *StartScenarioRequest) (*StartScenarioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartScenario not implemented")
}
func (UnimplementedScenarioServiceServer) StopScenario(context.Context, *StopScenarioRequest) (*StopScenarioResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopScenario not implemented")
}
func (UnimplementedScenarioServiceServer) GetScenarioStatus(context.Context, *GetScenarioStatusRequest) (*GetScenarioStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScenarioStatus not implemented")
}
func (UnimplementedScenarioServiceServer) GetTerminalURL(context.Context, *GetTerminalURLRequest) (*GetTerminalURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTerminalURL not implemented")
}
func (UnimplementedScenarioServiceServer) GetDirectoryStructure(context.Context, *GetDirectoryStructureRequest) (*GetDirectoryStructureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectoryStructure not implemented")
}
func (UnimplementedScenarioServiceServer) mustEmbedUnimplementedScenarioServiceServer() {}
func (UnimplementedScenarioServiceServer) testEmbeddedByValue()                         {}

// UnsafeScenarioServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScenarioServiceServer will
// result in compilation errors.
type UnsafeScenarioServiceServer interface {
	mustEmbedUnimplementedScenarioServiceServer()
}

func RegisterScenarioServiceServer(s grpc.ServiceRegistrar, srv ScenarioServiceServer) {
	// If the following call pancis, it indicates UnimplementedScenarioServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScenarioService_ServiceDesc, srv)
}

func _ScenarioService_StartScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioServiceServer).StartScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioService_StartScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioServiceServer).StartScenario(ctx, req.(*StartScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioService_StopScenario_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopScenarioRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioServiceServer).StopScenario(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioService_StopScenario_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioServiceServer).StopScenario(ctx, req.(*StopScenarioRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioService_GetScenarioStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScenarioStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioServiceServer).GetScenarioStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioService_GetScenarioStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioServiceServer).GetScenarioStatus(ctx, req.(*GetScenarioStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioService_GetTerminalURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTerminalURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioServiceServer).GetTerminalURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioService_GetTerminalURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioServiceServer).GetTerminalURL(ctx, req.(*GetTerminalURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScenarioService_GetDirectoryStructure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirectoryStructureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScenarioServiceServer).GetDirectoryStructure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ScenarioService_GetDirectoryStructure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScenarioServiceServer).GetDirectoryStructure(ctx, req.(*GetDirectoryStructureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ScenarioService_ServiceDesc is the grpc.ServiceDesc for ScenarioService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScenarioService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scenario.ScenarioService",
	HandlerType: (*ScenarioServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartScenario",
			Handler:    _ScenarioService_StartScenario_Handler,
		},
		{
			MethodName: "StopScenario",
			Handler:    _ScenarioService_StopScenario_Handler,
		},
		{
			MethodName: "GetScenarioStatus",
			Handler:    _ScenarioService_GetScenarioStatus_Handler,
		},
		{
			MethodName: "GetTerminalURL",
			Handler:    _ScenarioService_GetTerminalURL_Handler,
		},
		{
			MethodName: "GetDirectoryStructure",
			Handler:    _ScenarioService_GetDirectoryStructure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/scenario.proto",
}
